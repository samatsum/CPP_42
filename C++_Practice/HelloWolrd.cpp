/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   HelloWolrd.cpp                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: samatsum  <zunandkun@gmail.com      >      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 20:17:48 by samatsum          #+#    #+#             */
/*   Updated: 2025/04/15 15:03:30 by samatsum         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <stdio.h>

int main (){
    std::cout << "HelloWorld" << std::endl;
    return 0;
}



int main(){
    printf("HelloWorld\n");//関数での入出力
    std::cout << "HelloWorld\n";//ストリームでの入出力
    return 0;
}
// なぜ関数でもできるのに、ストリームという機能を作ったのか？
// ↓
// 関数を使った入出力の場合、入出力の対象によって関数を使い分ける必要があります。 
// 具体例↓
// printf、scanf関数：標準入出力に対して使用。
// fprintf、fscanf：ファイルに対して使用。
// sprintf、vsprintf、sscanf：メモリに対して使用。
// ↓
// ストリームなら、外部にある色々な装置への入出力を１つの方法でできます。
// 言い換えれば、異なる装置を同じように扱うための仕組みがストリームとなっています。
// ↓
//　ストリームは出力の対象を自動で切り替えてくれるってこと！

int main (){
    std::cout << "HelloWorld" << std::endl;
    //↑coutは標準出力ストリームと呼ばれ、ストリームが元々用意したオブジェクト（つまりデータ）です。
    return 0;
}

//std::cout　とか、　std::endl　って？
//stdという場所にあるcoutというオブジェエクト, stdという場所にあるendlというオブジェエクトという意味。
// coutは出力、endlは改行を意味する
//北海道の山田さんと、東京都の山田さんは別人でしょう？
//ここでいう北海道、東京都、stdが「名前空間」と呼ばれるもの。
//つまり、名前空間とは「変数の住所」。
//プログラムの巨大化に伴って生まれた問題の１つ、変数・関数・クラスの「名前の重複」を防ぐために生まれたのが「名前空間」。
//ちなみに、「::」はスコープ解決演算子と呼ばれており、「どのクラスに所属するか？」を表すための情報となっています。
//名前空間の省略(using namespase 〇〇;)は便利ですが、実際の現場ではあまり使われません。
//だって、重複を防ぐためにわざわざ名前空間に入れてるんだもん……省略したら重複しちゃうよ。

int main (){
    std::cout << "HelloWorld" << std::endl;//　バッファに溜まった未処理のデータを吐き出す。
    std::cout << "HelloWorld\n"; // ただ改行するだけ。
    return 0;
}

//std::endlで、溜まったタスクを一気に吐き出し,改行できるということ。